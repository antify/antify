model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String?
  name             String
  isSuperAdmin     Boolean            @default(false)
  isBanned         Boolean            @default(false)
  tenantAccesses   UserTenantAccess[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  profilePicture   Media?             @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?
}

model Role {
  id               String             @id @default(uuid())
  isAdmin          Boolean
  name             String
  permissions      RolePermission[]
  UserTenantAccess UserTenantAccess[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
}

model Media {
  id        String    @id @default(uuid())
  title     String
  fileName  String    @unique
  fileType  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  User      User[]
}

model RolePermission {
  permissionId String
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  createdAt    DateTime @default(now())

  @@id([roleId, permissionId])
}

model UserTenantAccess {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  isPending Boolean  @default(false)

  @@id([userId, tenantId])
}
